{"ast":null,"code":"import _defineProperty from \"/home/alaya/workspace/lab/reactjs-chat/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/alaya/workspace/lab/reactjs-chat/src/components/chats/Chat.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport firebase from '../db/firestore';\nimport UsersOnline from './UsersOnline';\nimport ChatBox from './ChatBox';\nimport MessageBox from './MessageBox';\nimport HeaderChat from './HeaderChat';\nimport { connect } from 'react-redux';\nimport { saveComment, getComments } from '../../actions/chatActions';\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      texto: \"\"\n    };\n    this.chatsTemp = [];\n    this.db = firebase.firestore();\n\n    this.getChats = async () => {\n      console.log('comenzando');\n      await this.props.getComments(this.props.rooms.selected.id);\n      console.log('terminando');\n      this.setState({\n        texto: ''\n      });\n    };\n\n    this.handlerInputKey = async e => {\n      if (e.key === 'Enter') {\n        let _this$props = this.props,\n            auth = _this$props.auth,\n            rooms = _this$props.rooms;\n        let comment = {\n          userId: auth.user.uid,\n          message: this.state.texto,\n          roomId: rooms.selected.id\n        };\n        await this.props.saveComment('chats', comment);\n        console.log(this.props);\n        this.setState({\n          texto: \"\"\n        });\n      }\n    };\n\n    this.handlerClick = async e => {\n      let _this$props2 = this.props,\n          autn = _this$props2.autn,\n          rooms = _this$props2.rooms;\n      let comment = {\n        userId: auth.user.uid,\n        message: this.state.texto,\n        roomId: rooms.selected.id\n      };\n      await this.props.saveComment('chats', comment);\n      this.setState({\n        texto: \"\"\n      });\n    };\n\n    this.viewPrivateChats = user => {\n      console.log('test  ' + user.id);\n      this.setState(_objectSpread({}, this.state, {\n        user2: user,\n        isRomm: false\n      }), () => {\n        this.loadPrivateChat();\n      });\n    };\n\n    this.viewRoomChats = () => {\n      this.setState({\n        isRomm: true\n      }, () => {\n        this.getChats();\n      });\n    };\n\n    this.handlerInputChange = e => {\n      //console.log(e.target.value)\n      this.setState({\n        texto: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getChats();\n  }\n\n  componentWillUnmount() {\n    //let ref = this.db.collection('users');\n    //ref.doc.update()\n    console.log('Aja componentWillUnmount-------------------------');\n  }\n\n  render() {\n    const rooms = this.props.rooms;\n    const chatsBox = this.props.comments.map(chat => React.createElement(ChatBox, {\n      key: chat.id,\n      chat: _objectSpread({}, chat, {\n        me: this.props.auth.user.uid\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"row mb-0 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-4  p-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(UsersOnline, {\n      viewPrivateChats: this.viewPrivateChats,\n      viewRoomChats: this.viewRoomChats,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-8 m-0 border-light containerChats p-0 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(HeaderChat, {\n      nameChat: this.props.rooms.selected.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"messageChats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.props.comments.length > 1 ? chatsBox : null, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(MessageBox, {\n      handlerInputChange: this.handlerInputChange,\n      handlerInputKey: this.handlerInputKey,\n      message: this.state.texto,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.roomsReducer.rooms,\n  auth: state.authReducer.auth,\n  comments: state.chatReducer.comments\n});\n\nexport default connect(mapStateToProps, {\n  saveComment,\n  getComments\n})(Chat);","map":{"version":3,"sources":["/home/alaya/workspace/lab/reactjs-chat/src/components/chats/Chat.js"],"names":["React","Component","firebase","UsersOnline","ChatBox","MessageBox","HeaderChat","connect","saveComment","getComments","Chat","state","texto","chatsTemp","db","firestore","getChats","console","log","props","rooms","selected","id","setState","handlerInputKey","e","key","auth","comment","userId","user","uid","message","roomId","handlerClick","autn","viewPrivateChats","user2","isRomm","loadPrivateChat","viewRoomChats","handlerInputChange","target","value","componentDidMount","componentWillUnmount","render","chatsBox","comments","map","chat","me","name","length","mapStateToProps","roomsReducer","authReducer","chatReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport firebase from '../db/firestore';\nimport UsersOnline from './UsersOnline';\nimport ChatBox from './ChatBox';\nimport MessageBox from './MessageBox';\nimport HeaderChat from './HeaderChat';\nimport { connect } from 'react-redux';\nimport { saveComment, getComments } from  '../../actions/chatActions';\n\nclass Chat extends Component {\n\n\tstate = {\n\t  texto: \"\",\n\t}\n\n  chatsTemp=[];\n\n\tdb = firebase.firestore();\n\n\tcomponentDidMount(){\n\t\tthis.getChats();\n\t}\n  \n\n\tgetChats = async () => {\n    console.log('comenzando');\n    await this.props.getComments(this.props.rooms.selected.id);\n    console.log('terminando');\n    this.setState({ texto: '' })\n\t}\n\n // loadPrivateChat = async() => {\n //   this.chatsTemp=[];\n //   let chatKey = [this.state.user2.id,this.state.meId].sort().join();\n//\n//\t  let ref = this.db.collection('privateChats');\n //   await ref.where('chatKey', '==', chatKey)\n //            .orderBy(\"createdAt\", \"desc\")\n //            .limit(10)\n //            .onSnapshot((data)=>{\n //             this.chatsTemp=[];\n //             data.docs.forEach (chat => {\n //               let d = {\n //                 id: chat.id,\n //                 ...chat.data(),        \n //               }\n //               this.chatsTemp.push(d);\n //             });\n //             //console.log(this.chatsTemp.reverse());\n //             this.setState({chats: this.chatsTemp.reverse() });\n//\t   });\n // }\n\n\thandlerInputKey = async (e) => {\n\t    if (e.key === 'Enter') {\n        let { auth, rooms } = this.props;\n\n        let comment = {\n          userId: auth.user.uid,\n          message: this.state.texto,\n          roomId: rooms.selected.id\n        }\n        await this.props.saveComment('chats',comment);\n        console.log(this.props);\n        this.setState({texto: \"\"});\t        \n\t    }\n\t}\n\n\thandlerClick = async (e) => {\n\n    let { autn, rooms } = this.props;\n\n    let comment = {\n      userId: auth.user.uid,\n      message: this.state.texto,\n      roomId: rooms.selected.id\n    }\n    await this.props.saveComment('chats',comment);\n    this.setState({texto: \"\"});\n\t}\n\n\n  viewPrivateChats = (user) => {\n    console.log('test  ' + user.id);\n    this.setState({\n        ... this.state,\n        user2: user,\n        isRomm: false\n    }, () =>{\n        this.loadPrivateChat();\n      } \n    );    \n  }\n\n  viewRoomChats = () => {\n    this.setState({\n      isRomm: true\n    }, () =>{\n        this.getChats();\n    } );\n  }\n \n\thandlerInputChange = (e) => {\n    //console.log(e.target.value)\n\t\tthis.setState({ texto: e.target.value });\n   \n\t}\n\n\tcomponentWillUnmount (){\n\t\t//let ref = this.db.collection('users');\n\t\t//ref.doc.update()\n\t\tconsole.log('Aja componentWillUnmount-------------------------')\n\t}\n\n\trender (){\n    \n    const {rooms} = this.props; \n\n    const chatsBox = (\n      this.props.comments.map( chat => (\n                <ChatBox key = { chat.id }\n                         chat= { { ...chat, me: this.props.auth.user.uid } } />\n      ))\n    );\n\n\t\treturn(\t\t\t\n      <div className=\"row mb-0 \" >\n        <div className = \"col-4  p-0\" >\n          <UsersOnline  viewPrivateChats = { this.viewPrivateChats }\n                        viewRoomChats = { this.viewRoomChats }\n                        />\n        </div>           \n        <div className = \"col-8 m-0 border-light containerChats p-0 \" >\n          <HeaderChat\n            nameChat = { this.props.rooms.selected.name }\n          />\n          \n          <div className=\"messageChats\">\n            {this.props.comments.length >1 ? chatsBox: null }\n            <hr></hr>\n          </div>\n          <div className=\"footer\">\n            <MessageBox \n                handlerInputChange = {this.handlerInputChange}\n                handlerInputKey = {this.handlerInputKey}\n                message = { this.state.texto }\n            />\n          </div>\n        </div> \n      </div>\n\t\t);\n\n\t}\n\n\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.roomsReducer.rooms,\n  auth: state.authReducer.auth,\n  comments: state.chatReducer.comments\n});\n\nexport default connect( mapStateToProps, {saveComment, getComments} ) (Chat);"]},"metadata":{},"sourceType":"module"}