{"ast":null,"code":"import _defineProperty from \"/home/alaya/workspace/lab/reactjs-chat/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LIST_ROOMS, ROOM_IN, LIST_ROOM_USER } from './types';\nimport firebase from '../components/db/firestore';\nconst db = firebase.firestore();\nexport const listRooms = () => async dispatch => {\n  let rooms = [];\n  let ref = db.collection('rooms');\n\n  try {\n    let _ref = await ref.get(),\n        docs = _ref.docs;\n\n    rooms = docs.map(doc => _objectSpread({\n      id: doc.id\n    }, doc.data()));\n  } catch (err) {\n    let code = err.code,\n        message = err.message;\n    const error = {\n      code,\n      message\n    };\n    rooms = error;\n  } finally {\n    dispatch({\n      type: LIST_ROOMS,\n      payload: rooms\n    });\n  }\n};\nexport const roomIn = (room, userId) => async dispatch => {\n  const refRoom = db.collection('rooms').doc(room.id);\n  const refUser = db.collection('users').doc(userId);\n  const refRoomUser = db.collection('roomUser');\n\n  try {\n    const resp = await refRoomUser.where('roomId', '==', refRoom).where('userId', '==', refUser).get();\n\n    if (resp.empty) {\n      await refRoomUser.add({\n        roomId: refRoom,\n        userId: refUser,\n        online: true\n      });\n    }\n  } catch (err) {\n    conole.log(err);\n  } finally {\n    dispatch({\n      type: ROOM_IN,\n      payload: room\n    });\n  }\n};\nexport const getUsersRoom = room => async dispatch => {\n  const refRoom = db.collection('rooms').doc(room.id);\n  const refRoomUser = db.collection('roomUser');\n  const users = [];\n\n  try {\n    let usersDocs = await refRoomUser.where('roomId', '==', refRoom).where('online', '==', true).get();\n\n    for (let i = 0; i < usersDocs.docs.length; i++) {\n      let user = await usersDocs.docs[i].data().userId.get();\n      users.push(_objectSpread({\n        id: user.id\n      }, user.data()));\n    } //.onSnapshot( async snapUsers => {\n    //    for(let i=0; i<snapUsers.docs.length; i++ ){\n    //      let user =  await snapUsers.docs[i].data().userId.get();\n    //      users.push({id: user.id, ...user.data()});     \n    //    }\n    //});\n\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: LIST_ROOM_USER,\n      payload: users\n    });\n  } finally {\n    dispatch({\n      type: LIST_ROOM_USER,\n      payload: users\n    });\n  }\n};","map":{"version":3,"sources":["/home/alaya/workspace/lab/reactjs-chat/src/actions/roomActions.js"],"names":["LIST_ROOMS","ROOM_IN","LIST_ROOM_USER","firebase","db","firestore","listRooms","dispatch","rooms","ref","collection","get","docs","map","doc","id","data","err","code","message","error","type","payload","roomIn","room","userId","refRoom","refUser","refRoomUser","resp","where","empty","add","roomId","online","conole","log","getUsersRoom","users","usersDocs","i","length","user","push","console"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,cAA9B,QAAoD,SAApD;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,MAAMC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAX;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAMC,QAAN,IAAmB;AAE9C,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAGL,EAAE,CAACM,UAAH,CAAc,OAAd,CAAV;;AAEA,MAAI;AAAA,eACa,MAAMD,GAAG,CAACE,GAAJ,EADnB;AAAA,QACIC,IADJ,QACIA,IADJ;;AAGFJ,IAAAA,KAAK,GAAGI,IAAI,CAACC,GAAL,CAAUC,GAAG;AAEjBC,MAAAA,EAAE,EAAED,GAAG,CAACC;AAFS,OAGbD,GAAG,CAACE,IAAJ,EAHa,CAAb,CAAR;AAOD,GAVD,CAUE,OAAMC,GAAN,EAAU;AAAA,QACJC,IADI,GACcD,GADd,CACJC,IADI;AAAA,QACEC,OADF,GACcF,GADd,CACEE,OADF;AAER,UAAMC,KAAK,GAAG;AACdF,MAAAA,IADc;AAEdC,MAAAA;AAFc,KAAd;AAIFX,IAAAA,KAAK,GAAGY,KAAR;AACD,GAjBD,SAiBU;AAERb,IAAAA,QAAQ,CAAE;AACRc,MAAAA,IAAI,EAAErB,UADE;AAERsB,MAAAA,OAAO,EAAEd;AAFD,KAAF,CAAR;AAKD;AAEJ,CA/BM;AAkCP,OAAO,MAAMe,MAAM,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB,MAAMlB,QAAN,IAAkB;AACtD,QAAMmB,OAAO,GAAGtB,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBI,GAAvB,CAA2BU,IAAI,CAACT,EAAhC,CAAhB;AACA,QAAMY,OAAO,GAAGvB,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBI,GAAvB,CAA2BW,MAA3B,CAAhB;AACA,QAAMG,WAAW,GAAGxB,EAAE,CAACM,UAAH,CAAc,UAAd,CAApB;;AAEA,MAAI;AACF,UAAMmB,IAAI,GAAG,MAAMD,WAAW,CACnBE,KADQ,CACF,QADE,EACO,IADP,EACYJ,OADZ,EAERI,KAFQ,CAEF,QAFE,EAEO,IAFP,EAEYH,OAFZ,EAEqBhB,GAFrB,EAAnB;;AAIA,QAAGkB,IAAI,CAACE,KAAR,EAAc;AACV,YAAMH,WAAW,CAACI,GAAZ,CAAgB;AACtBC,QAAAA,MAAM,EAAEP,OADc;AAEtBD,QAAAA,MAAM,EAAEE,OAFc;AAGtBO,QAAAA,MAAM,EAAE;AAHc,OAAhB,CAAN;AAKH;AAEF,GAbD,CAaE,OAAMjB,GAAN,EAAU;AACRkB,IAAAA,MAAM,CAACC,GAAP,CAAWnB,GAAX;AACH,GAfD,SAeS;AACPV,IAAAA,QAAQ,CAAE;AACRc,MAAAA,IAAI,EAAEpB,OADE;AAERqB,MAAAA,OAAO,EAAEE;AAFD,KAAF,CAAR;AAID;AAEJ,CA3BM;AA8BP,OAAO,MAAMa,YAAY,GAAIb,IAAD,IAAU,MAAMjB,QAAN,IAAkB;AAEpD,QAAMmB,OAAO,GAAGtB,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBI,GAAvB,CAA2BU,IAAI,CAACT,EAAhC,CAAhB;AACA,QAAMa,WAAW,GAAGxB,EAAE,CAACM,UAAH,CAAc,UAAd,CAApB;AACA,QAAM4B,KAAK,GAAG,EAAd;;AACA,MAAI;AACD,QAAIC,SAAS,GAAG,MAAMX,WAAW,CACjCE,KADsB,CAChB,QADgB,EACP,IADO,EACFJ,OADE,EAEtBI,KAFsB,CAEhB,QAFgB,EAEP,IAFO,EAED,IAFC,EAGtBnB,GAHsB,EAAtB;;AAMD,SAAI,IAAI6B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGD,SAAS,CAAC3B,IAAV,CAAe6B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAIE,IAAI,GAAI,MAAMH,SAAS,CAAC3B,IAAV,CAAe4B,CAAf,EAAkBxB,IAAlB,GAAyBS,MAAzB,CAAgCd,GAAhC,EAAlB;AACA2B,MAAAA,KAAK,CAACK,IAAN;AAAY5B,QAAAA,EAAE,EAAE2B,IAAI,CAAC3B;AAArB,SAA4B2B,IAAI,CAAC1B,IAAL,EAA5B;AACD,KAVC,CAWF;AACA;AACA;AACA;AACA;AACA;;AAED,GAlBD,CAkBC,OAAMC,GAAN,EAAU;AACT2B,IAAAA,OAAO,CAACR,GAAR,CAAYnB,GAAZ;AACAV,IAAAA,QAAQ,CAAE;AACRc,MAAAA,IAAI,EAAEnB,cADE;AAERoB,MAAAA,OAAO,EAAEgB;AAFD,KAAF,CAAR;AAID,GAxBD,SAwBQ;AACN/B,IAAAA,QAAQ,CAAE;AACRc,MAAAA,IAAI,EAAEnB,cADE;AAERoB,MAAAA,OAAO,EAAEgB;AAFD,KAAF,CAAR;AAID;AAGJ,CArCM","sourcesContent":["import { LIST_ROOMS, ROOM_IN, LIST_ROOM_USER } from './types';\nimport firebase from '../components/db/firestore';\n\nconst db = firebase.firestore();\n\nexport const listRooms = () => async dispatch =>  {\n    \n    let rooms = [];\n    let ref = db.collection('rooms');\n    \n    try {\n      let { docs } = await ref.get();\n      \n      rooms = docs.map( doc =>\n        ({\n          id: doc.id,\n          ... doc.data()\n        })\n      );\n      \n    } catch(err){\n      let { code, message } = err;\n        const error = {\n        code,\n        message\n      }\n      rooms = error;\n    } finally {\n      \n      dispatch ({\n        type: LIST_ROOMS,\n        payload: rooms\n      }); \n\n    }\n    \n}\n\n\nexport const roomIn = (room ,userId) => async dispatch => {\n    const refRoom = db.collection('rooms').doc(room.id);\n    const refUser = db.collection('users').doc(userId);\n    const refRoomUser = db.collection('roomUser');\n\n    try { \n      const resp = await refRoomUser                \n                .where('roomId','==',refRoom)\n                .where('userId','==',refUser).get();\n                \n      if(resp.empty){\n          await refRoomUser.add({\n          roomId: refRoom,\n          userId: refUser,\n          online: true\n        });\n      }        \n\n    } catch(err){\n        conole.log(err);\n    } finally{\n      dispatch ({\n        type: ROOM_IN,\n        payload: room\n      }); \n    }           \n\n}\n\n\nexport const getUsersRoom = (room) => async dispatch => {    \n    \n    const refRoom = db.collection('rooms').doc(room.id);\n    const refRoomUser = db.collection('roomUser');\n    const users = []; \n    try {\n       let usersDocs = await refRoomUser                \n      .where('roomId','==',refRoom)\n      .where('online','==', true)\n      .get();\n\n      \n      for(let i=0; i < usersDocs.docs.length; i++ ){\n        let user =  await usersDocs.docs[i].data().userId.get();\n        users.push({id: user.id, ...user.data()});     \n      }\n      //.onSnapshot( async snapUsers => {\n      //    for(let i=0; i<snapUsers.docs.length; i++ ){\n      //      let user =  await snapUsers.docs[i].data().userId.get();\n      //      users.push({id: user.id, ...user.data()});     \n      //    }\n      //});\n      \n    }catch(err){\n      console.log(err);\n      dispatch ({\n        type: LIST_ROOM_USER,\n        payload: users\n      }); \n    }finally{\n      dispatch ({\n        type: LIST_ROOM_USER,\n        payload: users\n      }); \n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}